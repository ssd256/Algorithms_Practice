'use strict';

// JavaScript is synchronous. : 동기적(코드 순서대로 실행됨)
// Execute the code block in orger after hoisting. : 호이스팅 이후부터 작성한 코드의 순서대로 하나하나 동기적으로 실행됨
// hoisting: var, function declaration
console.log('1');
// callback function: 인자로 전달받은 함수를 전달받은 함수에서 나중에 호출하는 것
// 1000 = 1초 
// setTimeout: 브라우저 api -> 무조건 브라우저에 request 보냄
// 브라우저 api는 응답 기다리지 않고 바로 다음 코드로 넘어감
// 다음 코드 실행 후 1초 후에 '2'가 출력됨(비동기적 실행)
setTimeout(() => console.log('2'), 1000); // 동기
console.log('3');

// Synchronous callback
// 1, 3, hello, 2 순서로 출력됨
// 동기 -> 비동기 순으로 출력: 비동기는 timeout이 걸려있어서
// printImmediately, printWitheDelay 함수 호이스팅(시스템이 함수들을 맨 위에서 선언된 것으로 인식)
function printImmediately(print){
    print();
}
printImmediately(() => console.log('hello')); // 동기

// Asynchronous callback
function printWitheDelay(print, timeout){
    setTimeout(print, timeout);
}
printWitheDelay(() => console.log('async callback'), 2000); // 비동기

// Callback Hell example
class UserStorage {
    // back 역할 위해 loginUser의 timeout을 줘서 시간차 두기
    loginUser(id, password, onSuccess, onError) {
        setTimeout(() => {
            if(
                (id === 'ellie' && password === 'dream') ||
                (id === 'coder' && password === 'academy')
            ) {
                onSuccess(id);
            } else {
                onError(new Error('not found'));
            }
        }, 2000);
    }

    getRoles(user, onSuccess, onError) {
        setTimeout(() => {
            if(user === 'ellie') {
                onSuccess({ name: 'ellie', role: 'admin'});
            } else {
                onError(new Error('no access'));
            }
        }, 1000);
    }
}

// callback chain: 가독성, 디버깅, 유지보수에 좋지 않음
const userStorage = new UserStorage();
const id = prompt('enter your id');
const password = prompt('enter your password');
userStorage.loginUser(
    id, 
    password, 
    // user의 정보를 받아왔을 때: onSuccess
    user => {
        // user의 정보 받아오면 역할 정해줘야 함
        userStorage.getRoles(
            // user의 정보
            user, 
            // user의 정보 입력: onSuccess
            userWithRoles => {
                alert(`Hello ${userWithRoles.name}, you have a ${userWithRoles.role} role`);
            },
            error => {}
        );
    },
    // user의 정보를 받아오지 못했을 때: onError
    error => {
        console.log(error);
    }
);
