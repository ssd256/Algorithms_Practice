'use strict';
// JSON
// JavaScrit Object Notation

// 1. Object to JSON
// stringify(obj): Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
let json = JSON.stringify(true);
console.log(json);// true

json = JSON.stringify(['apple', 'banana']);
console.log(json);

const rabbit = {
    name: 'tori',
    color: 'white',
    size: null, 
    birthDate: new Date(),
   // symbol: Symbol('id'), // symbol도 object 데이터가 아니라 json에 포함되지 않음
   // 함수는 object 데이터가 아니라서 json에 포함되지 않음
   // object의 jump는 일반함수로 선언해야 name에 접근이 가능해짐. 
   // arrow(=>) 함수일 경우, this가 전역객체를 가리켜서 window가 출력되기 때문
   jump: function() {console.log(`${this.name} can jump!`);}
   // jump () {console.log(`${this.name} can jump!`);}
};
console.log(typeof(rabbit.birthDate)); // birthDate는 object
json = JSON.stringify(rabbit);
console.log(json);
console.log(json.name); // string("")로 바뀌어서 property에 접근이 안됨 -> undefined

// 내가 원하는 property만 정해서 전달하면 원하는 것들만 string으로 만들 수 있음
json = JSON.stringify(rabbit, ['name', 'color', 'size']);
console.log(json);

// rabbit object의 모든 key, value가 전달됨 -> 맨 처음 object를 감싸고 있는 [] 껍데기부터 받아옴
// return에서 key에(property) name이 들어오면 mika로 바꾸고, 아니면 그냥 value값을 사용
// 세밀하게 return값을 조절하고 싶을 때 callback 함수를 사용
json = JSON.stringify(rabbit, (key, value) => {
    console.log(`key: ${key}, value: ${value}`);
    return key === 'name' ? 'mika' : value; 
});
console.log(json);

// 2. JSON to Object
// parse(json): Converts a JavaScript Object Notation (JSON) string into an object.
// console.clear();
// json = JSON.stringify(rabbit);
// console.log(json);
const obj = JSON.parse(json, (key, value) => {
    console.log(`key: ${key}, value: ${value}`);
    return key === 'birthDate' ? new Date(value) : value;
});
console.log(obj);
rabbit.jump();
//obj.jump(); // string 된 json에는 jump 함수가 없음 
            // parse를 통해 obj로 만들어도 당연히 jump 함수는 없음!

console.log(rabbit.birthDate.getDate()); // 현재 date가 출력 -> birthDate가 object라서 내부의 함수 사용 가능

// json의 birthDate에는 string으로 변환된 new Date() 값이 담긴 것 -> Object로 변환해도 string 값을 object에 넣은 것이라서 내부 함수 사용X
// console.log(obj.birthDate.getDate()); 

// parse의 콜백함수를 통해 brithDate에 new Date(value)값을 넣어서 내부 함수 사용이 가능해짐
console.log(obj.birthDate.getDate()); 
